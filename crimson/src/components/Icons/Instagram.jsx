import { useEffect, useRef } from "react"

export const Instagram =({width='2em', className='vector_button'})=>{
    const IconRef = useRef(null)
    const LineRef = useRef(null)
    var Animation = null
    const handleEnter =()=>{
        clearInterval(Animation)
        Animation = setInterval(Grow,20)
    }
    const handleLeave =()=>{
        clearInterval(Animation)
        Animation = setInterval(Shrink,20)
    }
    const Grow = ()=>{
        var R = LineRef.current.getAttribute('stroke-dashoffset')
        var newR = parseInt(R) -2
        if(newR <= 0)clearInterval(Animation)
        LineRef.current.setAttribute("stroke-dashoffset",newR)
    }
    const Shrink = ()=>{
        var R = LineRef.current.getAttribute('stroke-dashoffset')
        var newR = parseInt(R) + 2
        if(newR >= 110)clearInterval(Animation)
        LineRef.current.setAttribute("stroke-dashoffset",newR)

    }
    return(
    
        <svg width={width}  viewBox="0 0 20 20" ref={IconRef} onMouseEnter={handleEnter} onMouseLeave={handleLeave} onClick={()=>{window.open('https://www.instagram.com/crimson.svg/')}} className={className}>
            <rect mask="url(#instagram_icon)" x='0'y='0'width='20'height='20' fill="var(--Copy)"/>
            <mask id="instagram_draw" maskUnits="userSpaceOnUse" x="0" y="0" width="20" height="20">
                <mask id="instagram_icon" maskUnits="userSpaceOnUse" x="0" y="0" width="20" height="20">
                    <path d="M10 1.80156C12.6702 1.80156 12.9864 1.81156 14.041 1.85972C15.0161 1.9042 15.5456 2.06693 15.8979 2.20398C16.3649 2.38551 16.6979 2.60193 17.0478 2.95187C17.3977 3.30181 17.6146 3.63487 17.7957 4.10178C17.9327 4.45413 18.0955 4.9836 18.14 5.9587C18.188 7.01325 18.1981 7.32943 18.1981 9.99968C18.1981 12.6699 18.1881 12.986 18.14 14.0406C18.0955 15.0157 17.9327 15.5452 17.7957 15.8975C17.6142 16.3645 17.3978 16.6975 17.0478 17.0474C16.6979 17.3973 16.3648 17.6142 15.8979 17.7953C15.5456 17.9323 15.0161 18.0951 14.041 18.1396C12.9865 18.1876 12.6703 18.1977 10 18.1977C7.32975 18.1977 7.01365 18.1877 5.9591 18.1396C4.984 18.0951 4.45452 17.9323 4.10218 17.7953C3.63519 17.6137 3.30221 17.3973 2.95227 17.0474C2.60241 16.6975 2.38551 16.3644 2.20438 15.8975C2.06725 15.5452 1.9046 15.0157 1.86012 14.0406C1.81204 12.9861 1.80196 12.6699 1.80196 9.99968C1.80196 7.32951 1.81196 7.01333 1.86012 5.9587C1.9046 4.9836 2.06733 4.45413 2.20438 4.10178C2.38591 3.63479 2.60233 3.30181 2.95227 2.95187C3.30221 2.60201 3.63527 2.38511 4.10218 2.20398C4.45452 2.06693 4.984 1.9042 5.9591 1.85972C7.01357 1.81204 7.32983 1.80156 10 1.80156ZM10 0C7.28415 0 6.94348 0.0116007 5.87694 0.0600838C4.81239 0.108567 4.0857 0.277778 3.44966 0.524994C2.79194 0.78069 2.23446 1.12263 1.67851 1.67851C1.12263 2.23446 0.78037 2.79194 0.524994 3.44966C0.277698 4.08578 0.108567 4.81279 0.0600838 5.87694C0.0116007 6.94356 0 7.28423 0 10C0 12.7158 0.0116007 13.0565 0.0600838 14.1231C0.108567 15.1876 0.277778 15.9143 0.524994 16.5503C0.78069 17.2081 1.12263 17.7655 1.67851 18.3215C2.23446 18.8774 2.79234 19.2193 3.44966 19.475C4.08578 19.7223 4.81279 19.8914 5.87694 19.9399C6.94348 19.9884 7.28415 20 10 20C12.7159 20 13.0565 19.9884 14.1231 19.9399C15.1876 19.8914 15.9143 19.7222 16.5503 19.475C17.2081 19.2192 17.7655 18.8774 18.3215 18.3215C18.8774 17.7655 19.2193 17.2077 19.475 16.5503C19.7223 15.9143 19.8914 15.1872 19.9399 14.1231C19.9884 13.0565 20 12.7159 20 10C20 7.28415 19.9884 6.94348 19.9399 5.87694C19.8914 4.81239 19.7222 4.0857 19.475 3.44966C19.2192 2.79194 18.8774 2.23446 18.3215 1.67851C17.7655 1.12263 17.2077 0.78069 16.5503 0.524994C15.9143 0.277698 15.1872 0.108567 14.1231 0.0600838C13.0566 0.0116007 12.7159 0 10 0ZM10 4.86495C7.1639 4.86495 4.86495 7.1639 4.86495 10C4.86495 12.8361 7.1639 15.1351 10 15.1351C12.8361 15.1351 15.1351 12.8361 15.1351 10C15.1351 7.1639 12.8361 4.86495 10 4.86495ZM10 13.3336C8.15916 13.3336 6.66651 11.8414 6.66651 10.0001C6.66651 8.15876 8.15916 6.66659 10 6.66659C11.8408 6.66659 13.3335 8.15876 13.3335 10.0001C13.3335 11.8414 11.8408 13.3336 10 13.3336ZM15.3379 3.46214C14.675 3.46214 14.1379 3.99922 14.1379 4.66214C14.1379 5.32506 14.675 5.86221 15.3379 5.86221C16.0009 5.86221 16.538 5.32506 16.538 4.66214C16.538 3.99922 16.0009 3.46214 15.3379 3.46214Z" fill="#ffffff"/>
                </mask>
                <g mask="url(#instagram_icon)">
                    <path 
                        ref={LineRef}
                        d="M10.5 6.00173C13 6.00173 14 7.50173 14 10.5017C14 12.5 12.5 14.5017 10 14.5017C7.5 14.5017 5.5 13.0017 5.5 10.5017C5.5 8.00173 7.5 6.00173 10 6.00173C12.5 6.00173 13.5 0.964152 9.5 0.964152C5.5 0.964152 2 0.501733 1.5 3.50173C1 6.50173 0.5 15.5019 2 17.5019C3.5 19.5019 14 19.0019 17 18.0019C20 17.0019 19.2893 6.08184 19 5.00189C18.598 3.50153 18 1.00021 14.5 1.00021C12.4604 1.00021 15.1667 4 16 6" 
                        stroke="white" 
                        stroke-width="4.2"
                        strokeDasharray='110'
                        strokeDashoffset='110'
                        fill="none"
                    />
                </g>
            </mask>
            <g mask="url(#instagram_draw)">
                <rect width="20" height="20" fill="url(#instagram_gradient)"/>
            </g>
            <defs>
                <radialGradient id="instagram_gradient" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(6.05173 20.5161) rotate(-36.5111) scale(31.058 16.796)">
                    <stop stop-color="#FFC600"/>
                    <stop offset="0.19" stop-color="#FFA500"/>
                    <stop offset="0.39" stop-color="#FF4501"/>
                    <stop offset="0.8" stop-color="#FF00D1"/>
                    <stop offset="1" stop-color="#8309FE"/>
                </radialGradient>
            </defs>
        </svg>

    )
}